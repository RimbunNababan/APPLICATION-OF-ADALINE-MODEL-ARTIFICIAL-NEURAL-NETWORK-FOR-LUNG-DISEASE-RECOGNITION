# input array
arr = [[1, 1,	-1,	-1,	1,	1,	1,	1,	-1], [1, 1,	1, -1,	1,	1,	-1,	1,	1], [-1, 1,	1,	-1,	1,	1,	-1,	1,	-1], [1,	1,	1,	1,	-1,	-1,	-1,	1,	1], [-1, -1, -1,	1,	-1,	-1,	1,	-1,	1]
       , [-1,	-1,	-1,	1,	-1,	-1,	1,	-1,	1], [1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1], [-1,	1,	1,	-1,	1,	1,	1,	-1,	-1], [1,	-1, 	1,	1,	1,	1,	-1,  1,	1] , [-1,	-1,	-1,	1,	-1,	1,	-1,	1,	1]
       , [1,	-1,	-1,	1,	1,	-1,	1,	1,	1], [1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1,	-1],[1,	-1,	1,	1,	-1,	1,	-1,	1,	1], [-1,	-1,	-1,	1,	-1,	1,	1,	-1,	1],
       [-1,	-1,	-1,	1,	-1,	1,	-1,	1,	1],[1,	-1,	-1,	1,	1,	-1,	1,	1,	1],[1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1,	-1], [1,	-1,	1,	1,	-1,	1,	-1,	1,	1],
       [-1,	-1,	-1,	1,	-1,	1,	1,	-1,	1],[1,	1,	-1,	-1,	1,	1,	1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1,	-1],[1,	1,	1,	1,	-1,	-1,	-1,	1,	1],[-1,	-1,	-1,	1,	-1,	-1,	1,	-1,	1],[-1,	-1,	-1,	1,	-1,	1,	-1,	1,	1],
       [1,	-1,	-1,	1,	1,	-1,	1,	1,	1],[1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1,	-1],[1,	-1,	1,	1,	-1,	1,	-1,	1,	1],[-1,	-1,	-1,	1,	-1,	-1,	1,	-1,	1],[1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1],
       [-1,	1,	1,	-1,	1,	1,	1,	-1,	-1],[1,	-1,	1,	1,	1,	1,	-1,	1,	1],[-1,	-1,	-1,	1,	-1,	1,	-1,	1,	1],[1,	-1,	-1,	1,	1,	-1,	1,	1,	1],[1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1,	-1]
       ,[1,	-1,	1,	1,	-1,	1,	-1,	1,	1],[-1,	-1,	-1,	1,	-1,	1,	1,	-1,	1],[1,	1,	1,	1,	-1,	-1,	-1,	1,	1],[-1,	-1,	-1,	1,	-1,	-1,	1,	-1,	1],[-1,	-1,	-1,	1,	-1,	1,	-1,	1,	1],[1,	-1,	-1,	1,	1,	-1,	1,	1,	1],
       [1,	-1,	1,	-1,	1,	-1,	-1,	1,	-1],[-1,	1,	1,	-1,	1,	1,	-1,	1, -1],[1,	-1,	1,	1,	-1,	1,	-1,	1, 1],[-1,	-1,	-1,	1,	-1,	-1,	1,	-1,	1],[1,	-1,	-1,	-1,	1,	-1,	1,	-1,	-1]]

# target array
t = [1,	-1,	-1,	-1,	1,	-1,	1, -1, 1, 1,	1,	-1,	-1,	-1,	1,	1,	1,	-1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	1,	1,	-1,	-1,	-1,	-1,	1,	-1,	-1,	1,	1,	-1,	-1,	-1,	1,	-1,	1,	1,	1,	-1,	-1,	-1,	-1,	1]
w1 = 0.05
w2 = 0.05
b = 1


for i in range(1):
    avg = 0
    print("EPOCH", i + 1, "Errors\n")
    for j in range(49):
        # calculating net input
        yi = arr[j][0] * w1 + arr[j][1] * w2 + 1 * b  # Hitung input bersih
        dif = t[j] - yi                                  # Hitung kesalahan (perbedaan antara target dan prediksi)
        # updated weights
        # Perbarui bobot dan bias berdasarkan kesalahan
        w1 += 0.05 * dif * arr[j][0]
        w2 += 0.05 * dif * arr[j][1]
        b += 0.05 * dif * 1
        err = dif * dif         # Hitung kesalahan kuadrat
        print(err, end=" ")
        avg += err
    print("\n\nTotal Mean Error :", avg, "\n\n")
